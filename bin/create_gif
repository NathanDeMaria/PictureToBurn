#!/usr/bin/env python
import os
import warnings
from fire import Fire
import logging

from picture_to_burn import mp4_to_gif, find_video

log = logging.getLogger('create_gif')
log.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
log.addHandler(ch)

def convert(some_mp4: str, width: int = 320):
    """
    Convert something to a gif. Currently supports local .mp4 files and tweets.
    """
    log.info(f"Running with {some_mp4}")
    if os.path.isfile(some_mp4):
        pass
    elif 'twitter.com' in some_mp4:
        log.info("Getting the video from Twitter")
        some_mp4 = find_video(some_mp4, log)

    if not _is_ffmpegable_url(some_mp4):
        raise NotImplementedError(
            f"Can't find a way to convert {some_mp4} into a gif")

    gif = mp4_to_gif(some_mp4, width)

    size_mb = _get_size(gif)
    while size_mb > 2:
        log.info(f"Width {width}")
        warnings.warn(f"Gif created is {size_mb:.02f} MB, "
                      f"and might not display in Slack. Making a smaller one.")
        os.remove(gif)
        width = width // 2
        gif = mp4_to_gif(some_mp4, width)
        size_mb = _get_size(gif)

    log.info(f"Created gif {gif} with size {size_mb} MB")

def _get_size(gif: str):
    return os.path.getsize(gif) / 1000000

# At least, I've tried it with these
FFMPEGABLE = ['ts', 'mp4', 'm3u8']

def _is_ffmpegable_url(s: str) -> bool:
    if not s.startswith('http'):
        return False
    ext = s.split('.')[-1]
    return ext in FFMPEGABLE


if __name__ == '__main__':
    Fire(convert)
